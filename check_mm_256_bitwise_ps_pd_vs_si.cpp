/*
  This file is a simple test of the AVX instructions via intrinsics
    _mm256_and_ps          vandps
    _mm256_and_pd          vandpd
    _mm256_andnot_ps       vandnps
    _mm256_andnot_pd       vandnpd
    _mm256_xor_ps          vxorps
    _mm256_xor_pd          vxorpd
    _mm256_or_ps           vorps
    _mm256_or_pd           vorpd
  
  checking if they are equivalent to the corresponding bitwise integer
  operations introduced in AVX2, via instrinsics
    _mm256_and_si256       vpand
    _mm256_andnot_si256    vpandn
    _mm256_xor_si256       vpxor
    _mm256_or_si256        vpor
  
  The si256 operations are emulated by 32 bit integer packed integer 
  operations, and the instructions are generated by intrinsics
  provided by immintrin.h

  The test indicates that they are really equivalent.
 
  If you want to try it by yourself
       g++ -mavx check_mm_256_bitwise_ps_pd_vs_si.cpp -s -o check_mm_256_bitwise_ps_pd_vs_si.s
       g++ check_mm_256_bitwise_ps_pd_vs_si.s -o check_mm_256_bitwise_ps_pd_vs_si
      ./check_mm_256_bitwise_ps_pd_vs_si
  
  Where check_mm_256_bitwise_ps_pd_vs_si.s is the assembly source generated by g++
  and check_mm_256_bitwise_ps_pd_vs_si is an executable that runs the tests
  described here.
  
*/

#include <cstdio>
#include <immintrin.h>
#include <stdint.h>
#include <cassert>
void fprint_m256(FILE *f, uint32_t *v){
  //fprintf(f, "%08x_%08x_%08x_%08x_%08x_%08x_%08x_%08x\n",
  //  v[0], v[1], v[2], v[3], v[4], v[5], v[6], v[7]);
}

int main(){
  FILE *frand = fopen("/dev/urandom", "r");
  union {
    uint32_t m32[8];
    __m256   m256;
    __m256d  m256d;
  } rhs[10000], lhs_pd, lhs_ps, lhs_i32;
  fread((void*)&rhs[0], 1, sizeof(rhs), frand);
  fclose(frand);
  printf("Test AVX intrinsics for bitwise operations:\n");
  printf(" --- Test  _mm256_and_pd    and    _mm256_and_ps intrinsics;\n");
  for(int k = 0; k < sizeof(rhs)/sizeof(rhs[0]); ++k){
    lhs_ps.m256  = _mm256_and_ps(rhs[k].m256,  rhs[k+1].m256 );
    lhs_pd.m256d = _mm256_and_pd(rhs[k].m256d, rhs[k+1].m256d);
    for(int i = 0; i < 8; ++i)lhs_i32.m32[i] = rhs[k].m32[i] & rhs[k+1].m32[i];
    for(int i = 0; i < 8; ++i) assert(lhs_pd.m32[i] == lhs_i32.m32[i]);
    for(int i = 0; i < 8; ++i) assert(lhs_ps.m32[i] == lhs_i32.m32[i]);
    fprint_m256(stdout, lhs_pd .m32);
    fprint_m256(stdout, lhs_ps .m32);
    fprint_m256(stdout, lhs_i32.m32);
  }
  printf(" --- Test  _mm256_andnot_pd and _mm256_andnot_ps intrinsics;\n");
  for(int k = 0; k < sizeof(rhs)/sizeof(rhs[0]); ++k){
    lhs_ps.m256  = _mm256_andnot_ps(rhs[k].m256,  rhs[k+1].m256 );
    lhs_pd.m256d = _mm256_andnot_pd(rhs[k].m256d, rhs[k+1].m256d);
    for(int i = 0; i < 8; ++i)lhs_i32.m32[i] = ~rhs[k].m32[i] & rhs[k+1].m32[i];
    for(int i = 0; i < 8; ++i) assert(lhs_pd.m32[i] == lhs_i32.m32[i]);
    for(int i = 0; i < 8; ++i) assert(lhs_ps.m32[i] == lhs_i32.m32[i]);
    fprint_m256(stdout, lhs_pd .m32);
    fprint_m256(stdout, lhs_ps .m32);
    fprint_m256(stdout, lhs_i32.m32);
  }
  printf(" --- Test  _mm256_or_pd     and     _mm256_or_ps intrinsics;\n");
  for(int k = 0; k < sizeof(rhs)/sizeof(rhs[0]); ++k){
    lhs_ps.m256  = _mm256_or_ps(rhs[k].m256,  rhs[k+1].m256 );
    lhs_pd.m256d = _mm256_or_pd(rhs[k].m256d, rhs[k+1].m256d);
    for(int i = 0; i < 8; ++i)lhs_i32.m32[i] = rhs[k].m32[i] | rhs[k+1].m32[i];
    for(int i = 0; i < 8; ++i) assert(lhs_pd.m32[i] == lhs_i32.m32[i]);
    for(int i = 0; i < 8; ++i) assert(lhs_ps.m32[i] == lhs_i32.m32[i]);
    fprint_m256(stdout, lhs_pd .m32);
    fprint_m256(stdout, lhs_ps .m32);
    fprint_m256(stdout, lhs_i32.m32);
  }

  printf(" --- Test  _mm256_xor_pd    and    _mm256_xor_ps intrinsics;\n");
  for(int k = 0; k < sizeof(rhs)/sizeof(rhs[0]); ++k){
    lhs_ps.m256  = _mm256_xor_ps(rhs[k].m256,  rhs[k+1].m256 );
    lhs_pd.m256d = _mm256_xor_pd(rhs[k].m256d, rhs[k+1].m256d);
    for(int i = 0; i < 8; ++i)lhs_i32.m32[i] = rhs[k].m32[i] ^ rhs[k+1].m32[i];
    for(int i = 0; i < 8; ++i) assert(lhs_pd.m32[i] == lhs_i32.m32[i]);
    for(int i = 0; i < 8; ++i) assert(lhs_ps.m32[i] == lhs_i32.m32[i]);
    fprint_m256(stdout, lhs_pd .m32);
    fprint_m256(stdout, lhs_ps .m32);
    fprint_m256(stdout, lhs_i32.m32);
  }
  printf("This indicate that AVX intrinsics for bitwise operations\n");
  printf("with floating point operands can be used in replacement to \n");
  printf("AVX2 intrinsics for bitwise operations with integer operands.\n");
  printf("-- Author: Alexandre Felipe\n");
  return 0;
} 

